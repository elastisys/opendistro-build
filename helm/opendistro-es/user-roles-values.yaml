certmanager:
  enabled: true
  elasticsearch:
    transport:
      commonName: nodes.elastic-system.svc.cluster.local
      organization:
      - Elastisys
    admin:
      enabled: true
      commonName: admin.elastic-system.svc.cluster.local
      organization:
      - Elastisys

elasticsearch:
  ssl:
    transport:
      existingCertSecret: opendistro-es-transport
      existingCertSecretCertSubPath: tls.crt
      existingCertSecretKeySubPath: tls.key
      existingCertSecretRootCASubPath: ca.crt

    admin:
      enabled: true
      existingCertSecret: opendistro-es-admin
      existingCertSecretCertSubPath: tls.crt
      existingCertSecretKeySubPath: tls.key
      existingCertSecretRootCASubPath: ca.crt

  config:
    opendistro_security.restapi.roles_enabled: ["all_access", "security_rest_api_access"]
    opendistro_security.allow_unsafe_democertificates: false
    opendistro_security.allow_default_init_securityindex: false
    opendistro_security.audit.type: internal_elasticsearch
    opendistro_security.enable_snapshot_restore_privilege: true
    opendistro_security.check_snapshot_restore_write_privileges: true
    cluster.routing.allocation.disk.threshold_enabled: false
    opendistro_security.audit.config.disabled_rest_categories: NONE
    opendistro_security.audit.config.disabled_transport_categories: NONE
    opendistro_security.authcz.admin_dn:
    - 'CN=admin.elastic-system.svc.cluster.local,O=Elastisys'
    opendistro_security.nodes_dn:
    - 'CN=nodes.elastic-system.svc.cluster.local,O=Elastisys'
    opendistro_security.ssl.transport.pemcert_filepath: elk-transport-crt.pem
    opendistro_security.ssl.transport.pemkey_filepath: elk-transport-key.pem
    opendistro_security.ssl.transport.pemtrustedcas_filepath: elk-transport-root-ca.pem
    opendistro_security.ssl.transport.enforce_hostname_verification: false

  securityConfig:
    enabled: true
    config:
      config.yml: |-
        _meta:
          type: "config"
          config_version: 2
        config:
          dynamic:
            kibana:
              multitenancy_enabled: true
              server_username: kibana

            authc:
              basic_internal_auth_domain:
                description: "Authenticate via HTTP Basic against internal users database"
                http_enabled: true
                transport_enabled: true
                order: 0
                http_authenticator:
                  type: basic
                  challenge: false
                authentication_backend:
                  type: internal

      #Define users, roles, mappings and tenants below
      internal_users.yml: |-
        _meta:
          type: "internalusers"
          config_version: 2

        #define admin user
        admin:
          hash: "$2a$12$VcCDgh2NDk07JGN0rjGbM.Ad41qVR/YFJcgHp0UGns5JDymv..TOG"
          reserved: true
          backend_roles:
          - "admin"
          description: "Demo admin user"

        #define user for  for the Kibana server
        kibana:
          hash: "$2y$12$efAwiXyV.uRLnYy9c0Kdju4hrr8fso2cKC7ObkHTrTk4jGXHlzmzi"
          reserved: true
          description: "kibana server user"

        #define user for fluentd
        fluentd:
          hash: "$2a$12$u1ShR4l4uBS3Uv59Pa2y5.1uQuZBrZtmNfqB3iM/.jL0XoV9sghS2"
          reserved: true
          description: "fluentd user"

        #define user for snapshots
        snapshot:
          hash: "$2y$12$HARtGIKFsoVT8ypHHA6QwOx6XPoP.En/ReIjLGI90rVqLHf2Lcmhe"
          reserved: true
          description: "manage_snapshot user"

        #define user for ilm
        ilm:
          hash: "$2y$12$SHMJ3.DOHJFCVi6wOrLfh.gXcYAgh4dBtRitA0d/Txd2Z3tbSiGoy"
          reserved: true
          description: "ilm user"

      roles.yml: |-
        _meta:
          type: "roles"
          config_version: 2

        #roles for fluentd user
        fluentd:
          reserved: true
          cluster_permissions:
          - "cluster_composite_ops"
          - "cluster_monitor"
          - "cluster:admin/ingest/pipe/get"
          - "cluster:admin/ingest/pipeline/put"
          - "indices:admin/template/get"
          - "indices:admin/template/put"
          index_permissions:
          - index_patterns:
            - "kubernetes*"
            allowed_actions:
            - "crud"
            - "create_index"
          - index_patterns:
            - "kubeaudit*"
            allowed_actions:
            - "crud"
            - "create_index"
          - index_patterns:
            - "other*"
            allowed_actions:
            - "crud"
            - "create_index"

        #roles for ilm user
        manage_ilm:
          reserved: true
          cluster_permissions:
          - "ODS_CLUSTER_MANAGE_ILM"
          index_permissions:
          - index_patterns:
            - "*"
            allowed_actions:
           - "cluster:admin/ilm/*"

      roles_mapping.yml: |-
        _meta:
          type: "rolesmapping"
          config_version: 2

        # user-roles mapping
        all_access:
          reserved: true
          backend_roles:
          - "admin"
          description: "Maps admin to all_access"

        kibana_server:
          reserved: true
          users:
          - "kibana"
          description: "Maps kibana user with the static  kinana_server role"

        fluentd:
          reserved: true
          users:
          - "fluentd"
          description: "Maps fluentd user to fluentd role"

        manage_snapshots:
          reserved: true
          users:
          - "snapshot"
          description: "Maps snapshot user to the static manage_snapshots role"

        manage_ilm:
          reserved: true
          users:
          - "ilm"
          description: "Maps ilm user to manage_ilm role"

      tenants.yml: |-
        _meta:
          type: "tenants"
          config_version: 2

      action_groups.yml: |-
        _meta:
          type: "actiongroups"
          config_version: 2

      nodes_dn.yml: |-
        _meta:
          type: "nodesdn"
          config_version: 2

kibana:
  elasticsearchAccount:
    useExistingSecret: false
    username: kibana
    password: kibana
    secret: "elasticsearchsecret"

  config:
    elasticsearch.password: ${ELASTICSEARCH_PASSWORD}
    elasticsearch.username: ${ELASTICSEARCH_USERNAME}
    opendistro_security.cookie.password: ${COOKIE_PASS}
    opendistro_security.cookie.secure: false
    elasticsearch.requestHeadersWhitelist:
    - securitytenant
    - Authorization
    - security_tenant
    elasticsearch.ssl.verificationMode: none
    opendistro_security.allow_client_certificates: true
    opendistro_security.multitenancy.enabled: true
    opendistro_security.multitenancy.tenants.enable_global: true
    opendistro_security.multitenancy.tenants.enable_private: true
    opendistro_security.readonly_mode.roles:
    - kibana_read_only
